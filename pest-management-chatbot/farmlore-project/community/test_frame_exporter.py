"""
Test script for the frame-based knowledge exporter.

This script demonstrates how community-contributed indigenous knowledge
is exported to Prolog format using the frame-based representation and
integrated with the main knowledge base.
"""
import os
import sys
from pathlib import Path
import datetime

# Add parent directory to path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# Add inference_engine directory to path
inference_engine_dir = os.path.join(parent_dir, 'api', 'inference_engine')
if inference_engine_dir not in sys.path:
    sys.path.append(inference_engine_dir)

# Import the Prolog engine
from prolog_engine import PrologEngine

# Mock classes for testing without Django
class KnowledgeKeeper:
    """A knowledge keeper who contributes indigenous knowledge."""
    def __init__(self, name, village, years_experience):
        self.id = 1
        self.name = name
        self.village = village
        self.years_experience = years_experience
        self.full_name = name
        
class IndigenousKnowledge:
    """Indigenous knowledge contributed by a knowledge keeper."""
    def __init__(self, title, description, practice_type, materials, crops, pests, keeper):
        self.id = 1
        self.title = title
        self.description = description
        self.practice_type = practice_type
        self.materials = materials
        self.crops = crops
        self.pests = pests
        self.keeper = keeper
        self.date_added = datetime.datetime.now()
        self.verification_status = 'verified'
        self.verification_count = 5

def generate_mock_knowledge():
    """Generate mock community knowledge entries for testing."""
    keeper1 = KnowledgeKeeper("Ntate Thabo", "Maseru", 35)
    keeper2 = KnowledgeKeeper("Mme Lineo", "Leribe", 28)
    
    knowledge_entries = [
        IndigenousKnowledge(
            "Ash Application for Pest Control",
            "Collecting wood ash from cooking fires and applying it to crops to repel insects. The ash creates a barrier that insects don't like to cross and also changes the pH of the leaf surface.",
            "pest_control",
            ["Wood ash from cooking fires", "Container for collecting ash"],
            ["maize", "beans", "cabbage"],
            ["aphids", "spider_mites"],
            keeper1
        ),
        IndigenousKnowledge(
            "Chili Pepper Spray",
            "Crushing hot chili peppers and mixing with water to create a natural insect repellent. The capsaicin in chilies deters many pests without harming the plants.",
            "pest_control",
            ["Hot chili peppers", "Water", "Container for mixing", "Spray bottle"],
            ["tomato", "cabbage"],
            ["tomato_hornworm", "aphids"],
            keeper1
        ),
        IndigenousKnowledge(
            "Kraal Manure Fertilization",
            "Using cattle kraal manure to fertilize soil before planting. The manure improves soil structure, adds nutrients, and increases water retention.",
            "soil_fertility",
            ["Aged cattle manure", "Tools for spreading"],
            ["maize", "sorghum", "beans"],
            [],
            keeper2
        ),
        IndigenousKnowledge(
            "Aloe Vera Leaf Spray",
            "Using aloe vera gel to treat fungal diseases on crops. The aloe gel has natural antifungal properties and helps plants recover from disease stress.",
            "disease_management",
            ["Fresh aloe vera leaves", "Knife", "Container for mixing", "Spray bottle"],
            ["tomato", "potato", "beans"],
            [],
            keeper2
        )
    ]
    
    return knowledge_entries

def export_to_prolog(knowledge_entries, output_file):
    """Export knowledge entries to Prolog format."""
    # Create directory if it doesn't exist
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("% ========================\n")
        f.write("% COMMUNITY KNOWLEDGE BASE\n")
        f.write("% ========================\n")
        f.write("% This file is automatically generated from community contributions\n")
        f.write("% Last updated: {}\n\n".format(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        
        # Export knowledge entries as Prolog frames
        for entry in knowledge_entries:
            # Convert title to a valid Prolog atom (lowercase, underscores)
            practice_name = entry.title.lower().replace(' ', '_')
            
            # Create a frame for each practice
            f.write("frame(practice, [\n")
            f.write(f"    name: {practice_name},\n")
            f.write(f"    type: {entry.practice_type},\n")
            
            # Add controls (pests) if any
            if entry.pests:
                pests_str = ', '.join(entry.pests)
                f.write(f"    controls: [{pests_str}],\n")
            else:
                f.write(f"    resolves: [low_fertility, poor_organic_matter],\n")
            
            # Add description
            f.write(f"    description: '{entry.description}',\n")
            
            # Add cost and difficulty (estimated)
            f.write(f"    cost: low,\n")
            f.write(f"    difficulty: medium,\n")
            
            # Add materials
            materials_str = ', '.join([f"'{material}'" for material in entry.materials])
            f.write(f"    materials: [{materials_str}],\n")
            
            # Add applicable crops
            crops_str = ', '.join(entry.crops)
            f.write(f"    applicable_crops: [{crops_str}],\n")
            
            # Add season (default to growing_season)
            f.write(f"    season: [growing_season],\n")
            
            # Add source information
            f.write(f"    source: '{entry.keeper.full_name} from {entry.keeper.village}',\n")
            f.write(f"    verification_count: {entry.verification_count},\n")
            
            # Add cultural context
            f.write("    cultural_context: [basotho]\n")
            f.write("]).\n\n")
        
        # Add helper predicates for community knowledge
        f.write("% ========================\n")
        f.write("% HELPER PREDICATES\n")
        f.write("% ========================\n")
        f.write("% Find indigenous practices for controlling a specific pest\n")
        f.write("indigenous_practice_for_pest(Pest, Practice) :-\n")
        f.write("    practice(name:Practice, controls:Controls, cultural_context:Ctx),\n")
        f.write("    member(basotho, Ctx),\n")
        f.write("    member(Pest, Controls).\n\n")
        
        f.write("% Find indigenous practices for a specific crop\n")
        f.write("indigenous_practice_for_crop(Crop, Practice) :-\n")
        f.write("    practice(name:Practice, applicable_crops:Crops, cultural_context:Ctx),\n")
        f.write("    member(basotho, Ctx),\n")
        f.write("    member(Crop, Crops).\n\n")
    
    print(f"Exported community knowledge to {output_file}")

def update_main_knowledge_base(kb_path, community_kb_path):
    """Update the main knowledge base to include the community knowledge."""
    # Check if the community knowledge is already included
    with open(kb_path, 'r', encoding='utf-8') as f:
        kb_content = f.read()
    
    include_directive = f":- include('{os.path.basename(community_kb_path)}')."
    if include_directive in kb_content:
        print("Community knowledge already included in main knowledge base")
        return
    
    # Add the include directive to the main knowledge base
    with open(kb_path, 'a', encoding='utf-8') as f:
        f.write("\n\n% Include community knowledge base\n")
        f.write(include_directive)
        f.write("\n")
    
    print(f"Updated main knowledge base at {kb_path} to include community knowledge")

def test_frame_based_exporter():
    """Test the frame-based knowledge exporter."""
    print("Testing Frame-Based Knowledge Exporter")
    print("=====================================")
    
    # Get the project root directory
    base_dir = Path(__file__).resolve().parent.parent
    community_kb_path = base_dir / 'prolog_intergration' / 'community_kb.pl'
    kb_path = base_dir / 'prolog_intergration' / 'knowledgebase.pl'
    
    # Generate mock knowledge
    print("\n1. Generating mock indigenous knowledge...")
    knowledge_entries = generate_mock_knowledge()
    print(f"Generated {len(knowledge_entries)} knowledge entries")
    
    # Export knowledge to Prolog
    print("\n2. Exporting knowledge to Prolog...")
    export_to_prolog(knowledge_entries, str(community_kb_path))
    
    # Update main knowledge base
    print("\n3. Updating main knowledge base...")
    update_main_knowledge_base(str(kb_path), str(community_kb_path))
    
    # Initialize the Prolog engine with the updated knowledge base
    print("\n4. Initializing Prolog Engine with the updated knowledge base...")
    prolog = PrologEngine()
    
    # Test querying indigenous practices for pests
    print("\n5. Testing indigenous practices for pests...")
    query = "indigenous_practice_for_pest(aphids, Practice)"
    results = prolog.safe_query(query)
    
    print("Indigenous practices for controlling aphids:")
    for result in results:
        practice = result.get('Practice', '')
        print(f"- {practice}")
    
    # Test querying indigenous practices for crops
    print("\n6. Testing indigenous practices for crops...")
    query = "indigenous_practice_for_crop(tomato, Practice)"
    results = prolog.safe_query(query)
    
    print("Indigenous practices for tomato crops:")
    for result in results:
        practice = result.get('Practice', '')
        print(f"- {practice}")
    
    # Test querying practice details
    print("\n7. Testing practice details...")
    query = "practice(name:ash_application_for_pest_control, description:Desc, materials:Materials, applicable_crops:Crops)"
    results = prolog.safe_query(query)
    
    if results:
        result = results[0]
        desc = result.get('Desc', '')
        materials = result.get('Materials', [])
        crops = result.get('Crops', [])
        
        print("Ash Application for Pest Control:")
        print(f"Description: {desc}")
        print(f"Materials: {materials}")
        print(f"Applicable crops: {crops}")
    
    # Test integration with existing knowledge base
    print("\n8. Testing integration with existing knowledge base...")
    query = "practice(name:Name, controls:Controls), member(aphids, Controls)"
    results = prolog.safe_query(query)
    
    print("All practices (conventional and indigenous) for controlling aphids:")
    for result in results:
        name = result.get('Name', '')
        print(f"- {name}")
    
    print("\nFrame-based knowledge export and integration test completed successfully!")

if __name__ == "__main__":
    test_frame_based_exporter()
